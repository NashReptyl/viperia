[{"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\index.js":"1","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\App.js":"2","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\components\\Routes\\index.js":"3","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Home.js":"4","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Dashboard.js":"5","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\utils\\api.js":"6","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Lobby.js":"7","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Game.js":"8","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\utils\\randomCodeGenerator.js":"9","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\components\\NavBar.js":"10","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\utils\\PrivateRoutes.js":"11","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\GuessWho.js":"12"},{"size":191,"mtime":1661227438192,"results":"13","hashOfConfig":"14"},{"size":1473,"mtime":1661701240442,"results":"15","hashOfConfig":"14"},{"size":876,"mtime":1661317191632,"results":"16","hashOfConfig":"14"},{"size":1039,"mtime":1661691874985,"results":"17","hashOfConfig":"14"},{"size":1146,"mtime":1661629928176,"results":"18","hashOfConfig":"14"},{"size":324,"mtime":1661699908226,"results":"19","hashOfConfig":"14"},{"size":10888,"mtime":1661691604534,"results":"20","hashOfConfig":"14"},{"size":130,"mtime":1661179728893,"results":"21","hashOfConfig":"14"},{"size":368,"mtime":1661140034190,"results":"22","hashOfConfig":"14"},{"size":1719,"mtime":1661699889319,"results":"23","hashOfConfig":"14"},{"size":521,"mtime":1661259433975,"results":"24","hashOfConfig":"14"},{"size":2036,"mtime":1661355299098,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"zkkevd",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"29"},"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\index.js",[],[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\App.js",[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\components\\Routes\\index.js",[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Home.js",["68"],[],"import React, { useState } from 'react'\r\nimport { getUserDetails } from '../utils/api';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Home(){\r\n    //Only if user isn't connected, otherwise -> /dashboard    \r\n    let navigate = useNavigate();\r\n    const[loading, setLoading] = useState(true);\r\n    React.useEffect ( () => {\r\n        getUserDetails()\r\n        .then(() => {\r\n            navigate('/dashboard')\r\n        }).catch((err) => {\r\n          setLoading(false);})\r\n    },[])\r\n    \r\n    const login = () => window.location.href = process.env.REACT_APP_API_URL+'/api/user/login'\r\n    return !loading && (\r\n      <div>\r\n          <img alt=\"viperia\" className='img-titre'src={process.env.PUBLIC_URL + '/img/titre.png'} />\r\n        \r\n        <div className='connection'>\r\n          <button className='button-login' onClick = {login}>Connexion\r\n          <img alt=\"discord\" className='img-discord' src={process.env.PUBLIC_URL + '/img/discord.png'} /></button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Home;","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Dashboard.js",["69","70","71","72","73"],[],"import React, { useState, useEffect } from 'react'\r\nimport { getUserDetails } from '../utils/api';\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\n\r\nfunction Dashboard (){\r\n    let navigate = useNavigate();\r\n\r\n    const[loading, setLoading] = useState(true);\r\n\r\n    useEffect ( () => {\r\n        getUserDetails()\r\n        .then(({}) => {\r\n            setLoading(false);\r\n        }).catch(() => \r\n        navigate('/home'))\r\n    },[])\r\n\r\n    return !loading && (\r\n      <div className='div-games'>\r\n        <Link className='games' style={{display:'inline-block'}} to={`/guesswho`}>\r\n        <img className='img-guesswho' src={process.env.PUBLIC_URL+\"/img/quiestce2.png\"} height=\"300\"/>\r\n        </Link>\r\n        <Link style={{display:'inline-block'}} to={`/dashboard`}>\r\n        <img className='img-guesswho' src={process.env.PUBLIC_URL+\"/img/construction.png\"} height=\"300\"/>\r\n        </Link>\r\n        <Link style={{display:'inline-block'}} to={`/dashboard`}>\r\n        <img className='img-guesswho' src={process.env.PUBLIC_URL+\"/img/construction2.png\"} height=\"300\"/>\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Dashboard;","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\utils\\api.js",[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Lobby.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90"],[],"import React, { useEffect, useState } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { getUserDetails,getCharacters } from '../utils/api';\r\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\r\nimport queryString from 'query-string'\r\nimport { useContext } from 'react';\r\nimport { UserContext } from '../App';\r\nimport ReactLoading from 'react-loading';\r\n\r\nlet socket;\r\n\r\nfunction Lobby(){\r\n  const user = useContext(UserContext);\r\n  const [player1, setPlayer1] = useState(UserContext)\r\n  const location = useLocation();\r\n  const data = queryString.parse(location.search)\r\n  const URL = process.env.REACT_APP_API_URL;\r\n  let navigate = useNavigate();\r\n\r\n  /* STATE OF THE PAGE */\r\n\r\n  const[loading, setLoading] = useState(true);\r\n  const[started, setStarted] = useState(false);\r\n\r\n  useEffect ( () => {\r\n    getUserDetails()\r\n    .then(({}) => {\r\n      setLoading(false);\r\n    }).catch((err) => \r\n      navigate('/home'));\r\n  },[])\r\n\r\n\r\n  /* SOCKET INITIALISATION */\r\n    \r\n  const [room, setRoom] = useState(data.roomCode)\r\n  const [roomFull, setRoomFull] = useState(false)\r\n  const [nbPlayer, setNbPlayer] = useState(1)\r\n  const [player2, setPlayer2] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const connectionOptions =  {\r\n      \"forceNew\" : true,\r\n      \"reconnectionAttempts\": \"Infinity\", \r\n      \"timeout\" : 10000,                  \r\n      \"transports\" : [\"websocket\"]\r\n    }\r\n    socket = io.connect(URL, connectionOptions)\r\n        \r\n    socket.emit('join', {room: room, user: user.username, discordId:user.discordId, avatar:user.avatar}, (error) => {\r\n       if(error)\r\n          setRoomFull(true)\r\n    })\r\n\r\n    socket.on('roomData', (payload, cb) => {\r\n      setNbPlayer(payload.users.length)\r\n      if(payload.users.length ==2){\r\n        setPlayer1(payload.users[0])\r\n        setPlayer2(payload.newUser)\r\n      }\r\n      else{\r\n        setPlayer1(payload.users[0])\r\n        setStarted(false);\r\n        getCharacters()\r\n        .then(({data}) =>{\r\n          setCharacters(data.characters);\r\n          setReponseAdversaire(data.reponses[0]);\r\n          setReponseJoueur(data.reponses[1]);\r\n        })\r\n      }\r\n    })\r\n\r\n    return function cleanup() {\r\n      socket.disconnect()\r\n      socket.off()\r\n    }\r\n  }, [])\r\n\r\n\r\n  /* GAME PARAMETERS  */\r\n  const[characters, setCharacters] = useState([]);\r\n  const[reponseAdversaire, setReponseAdversaire] = useState('');\r\n  const[reponseJoueur, setReponseJoueur] = useState('');\r\n  const[charactersLeft, setcharactersLeft] = useState([]);\r\n  \r\n  const removeCharacter = (name) => {\r\n    setcharactersLeft(charactersLeft.filter(c => {\r\n        return c !== name;\r\n      }),\r\n    );\r\n  }\r\n\r\n  const initCharactersLeft = (persos) => {\r\n    persos.map((perso) => \r\n      charactersLeft.push(perso.name)\r\n    )\r\n  }\r\n\r\n  useEffect(()=>{\r\n    socket.on('list-characters', (payload)=>{\r\n      setCharacters(payload.characters)\r\n      initCharactersLeft(payload.characters)\r\n      if(user.username==payload.p2.username){\r\n        setStarted(true);\r\n        setReponseAdversaire(payload.reponses[1]);\r\n        setReponseJoueur(payload.reponses[0]);\r\n      }\r\n    })\r\n\r\n    socket.on('return', (payload)=>{\r\n      if(user.username!==payload.player){\r\n        let i = payload.number\r\n        const choice = document.getElementById('c-'+i);\r\n        const not = document.getElementById('n-'+i);\r\n        choice.classList.toggle('cross');\r\n        not.classList.toggle('cross');\r\n      }\r\n    })\r\n\r\n    socket.on('resultat', (payload)=>{\r\n      if(user.username!==payload.user.username){\r\n        document.getElementById('choix').classList.toggle('cross');\r\n        if (payload.victoire)\r\n          document.getElementById('victoire').classList.toggle('cross');\r\n        else\r\n          document.getElementById('defaite').classList.toggle('cross');\r\n      }\r\n    })\r\n  },[])\r\n\r\n  //User start the game\r\n  const gameStarted = () => {\r\n    const reponseEnvoyée = [];\r\n    reponseEnvoyée.push(reponseAdversaire);\r\n    reponseEnvoyée.push(reponseJoueur);\r\n    socket.emit('start', {room:room, characters:characters, player2:player2, reponses: reponseEnvoyée})\r\n    setStarted(true);\r\n  }\r\n\r\n  //Add or remove a characters after being selected\r\n  const handleSelectInput = (i) => {\r\n    const perso = characters[i].name;\r\n    if (charactersLeft.includes(perso))\r\n      removeCharacter(perso);\r\n    else\r\n      setcharactersLeft(charactersLeft.concat(perso));\r\n  }\r\n\r\n  //User select an image\r\n  const select = (i) =>{\r\n    handleSelectInput(i);\r\n    const image = document.getElementById('img-'+i);\r\n    image.classList.toggle(\"grey\");\r\n    image.classList.toggle(\"img-perso\");\r\n    const croix = document.getElementById('cross-'+i);\r\n    croix.classList.toggle('cross');\r\n\r\n    socket.emit(\"select\", {number:i, player:user.username, room:room});\r\n  }\r\n\r\n  //User validate his response\r\n  const validate = () =>{\r\n    let victoire=true;\r\n    document.getElementById('choix').classList.toggle('cross');\r\n    if (document.getElementById('inputResponse').value == reponseJoueur.name){\r\n      document.getElementById('victoire').classList.toggle('cross');\r\n      victoire = false;\r\n    }\r\n    else\r\n      document.getElementById('defaite').classList.toggle('cross');\r\n    socket.emit('fin', {user:user, victoire:victoire, room:room});\r\n  }\r\n    \r\n  return !loading && (\r\n    <div>\r\n      {!started ? (\r\n      <div className='page-guess'>\r\n        <div className='base-guess'>\r\n          <div className='titre-guess'>\r\n            <span className='span-code'>Game Code: {room}</span>\r\n          </div>\r\n\r\n          <div className='player-lobby'>\r\n            <div className='player'>\r\n              <img src={\"https://cdn.discordapp.com/avatars/\"+player1.discordId+\"/\"+player1.avatar+\".png\"}\r\n                className=\"rounded-circle\" height=\"100\"/><br/>\r\n              <span className='pseudo-guess'>{player1.username}</span>\r\n            </div>\r\n            <div className='player'>\r\n              {nbPlayer===2 ? (\r\n              <><img src={\"https://cdn.discordapp.com/avatars/\" + player2.discordId + \"/\" + player2.avatar + \".png\"}\r\n                className=\"rounded-circle\" height=\"100\" /><br />\r\n              <span className='pseudo-guess'>{player2.username}</span></>\r\n              ) : (\r\n              <><span className='waiting'>Waiting <br/> Opponent \r\n                <ReactLoading className=\"loading\" type={'bubbles'} color={'white'} height={20} width={30} /></span>\r\n              </>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='start-lobby d-grid gap-2 col-6 mx-auto'>\r\n            {nbPlayer===2 && player1.username==user.username ? (\r\n            <button onClick={gameStarted} type=\"button\" className=\"btn btn-primary\">START</button>\r\n            ) : (\r\n            <button type=\"button\" className=\"btn btn-primary disabled\">START</button>\r\n            )} \r\n          </div>\r\n\r\n          <div className='quit-lobby'>\r\n            <Link className='d-grid gap-2 col-6 mx-auto' to={`/guesswho`}>\r\n              <button type=\"button\" className=\"btn btn-danger\">QUIT</button>\r\n            </Link>\r\n          </div>                \r\n        </div>        \r\n      </div>\r\n      ) :(\r\n      <div className='guess-game'>\r\n\r\n        <div className=\"row plateau\">\r\n          <h1> Qui est-ce ?</h1>\r\n          {characters.map((perso, index) => \r\n          <div className=\"col-md-2 col-sm-4  col-4\">\r\n            <div id={'img-'+index} className='card img-perso' onClick={() => select(index)}>\r\n              <img className=\"img-fluid card-img\" src={process.env.PUBLIC_URL + '/img/characters/' + perso.image} />\r\n              <img id={'cross-' + index} className=\"img-fluid card-img-overlay cross cross-image \" src={process.env.PUBLIC_URL + '/img/characters/cross.png'} />\r\n              <span className=\"card-text\">{perso.name} </span>\r\n              <small className=\"text-muted\">{perso.anime}</small>\r\n            </div>\r\n          </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className='right-part'>\r\n          <div>\r\n            <h1>Votre adversaire doit deviner:</h1>\r\n            <div className='card card-deviner'>\r\n              <img className=\"card-img\" src={process.env.PUBLIC_URL + '/img/characters/' + reponseAdversaire.image} />\r\n              <span className=\"card-text\">{reponseAdversaire.name} </span>\r\n              <small className=\"text-muted\">{reponseAdversaire.anime}</small>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"victoire\" className=\"alert alert-success cross\" role=\"alert\">\r\n            <h4 className=\"alert-heading\">Victoire</h4>\r\n            <p>Vous avez gagné </p>\r\n            <hr/>\r\n            <Link className='btn-fin' onClick={() => window.location.reload()} to={`/guesswho/lobby?roomCode=${room}`}>\r\n              <button type=\"button\" className=\"btn btn-outline-success\">Retour lobby</button>\r\n            </Link>\r\n            <Link className='' to={`/guesswho`}>\r\n              <button type=\"button\" className=\"btn btn-outline-success\">Quitter</button>\r\n            </Link>\r\n          </div>\r\n\r\n          <div id=\"defaite\" className=\"alert alert-danger cross\" role=\"alert\">\r\n            <h4 className=\"alert-heading\">Defaite</h4>\r\n            <p>La bonne réponse était : {reponseJoueur.name}</p>\r\n            <hr/>\r\n            <Link className='btn-fin' onClick={() => window.location.reload()} to={`/guesswho/lobby?roomCode=${room}`}>\r\n              <button type=\"button\" className=\"btn btn-outline-danger\">Retour lobby</button>\r\n            </Link>\r\n            <Link className='' to={`/guesswho`}>\r\n              <button type=\"button\" className=\"btn btn-outline-danger\">Quitter</button>\r\n            </Link>\r\n          </div>\r\n\r\n          <div id='choix' className=\"input-group mx-auto\">\r\n            <div className=\"input-group-prepend\">\r\n              <label className=\"input-group-text\" for=\"inputResponse\">Réponse</label>\r\n            </div>\r\n            <select className=\"custom-select\" id=\"inputResponse\">\r\n              <option selected>Choose...</option>\r\n              {charactersLeft.map((perso) => \r\n              <option value={perso}>{perso}</option>\r\n              )}\r\n            </select>\r\n            <button type=\"button\" onClick={validate} className=\"btn btn-primary\">Valider</button>\r\n          </div>\r\n          \r\n          <h1>Plateau adverse</h1>\r\n          <div className='row choice'>\r\n            {characters.map((perso, index) => \r\n            <div className=\"minimap col-md-2 col-sm-4 col-4\">\r\n              <img id={'c-'+index} className=\"cross img-fluid img-choice\" src={process.env.PUBLIC_URL + '/img/choice.png'} />\r\n              <img id={'n-'+index} className=\"img-fluid img-not\" src={process.env.PUBLIC_URL + '/img/not.png'} />\r\n            </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Lobby;","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\Game.js",[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\utils\\randomCodeGenerator.js",[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\components\\NavBar.js",["91","92"],[],"import {SignOutIcon} from '@primer/octicons-react'\r\nimport { Link, Outlet } from 'react-router-dom';\r\n\r\nfunction NavBar (props){\r\n    const logout = () => window.location.href = process.env.REACT_APP_API_URL+'/api/user/logout'\r\n    return (\r\n        <div>\r\n        <nav className=\"navbar navbar bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <Link className=\"navbar-brand\" to={`/dashboard`}>\r\n                    \r\n                        <img height=\"40\" alt=\"Brand\" src={process.env.PUBLIC_URL + '/img/logo.png'}/>\r\n                  \r\n                    </Link>\r\n                </div>\r\n                <div className=\"dropdown show\">\r\n                    <a className=\"btn btn-secondary bg-dark border-0 shadow-none\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <img\r\n                        src={\"https://cdn.discordapp.com/avatars/\"+props.user.discordId+\"/\"+props.user.avatar+\".png\"}\r\n                        className=\"rounded-circle profile\" height=\"40\"/>\r\n                    {props.user.username}\r\n                    </a>\r\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n                        <a className=\"dropdown-item\" href={process.env.REACT_APP_API_URL+\"/api/user/logout\"} onClick={logout}>\r\n                        <SignOutIcon size={16} verticalAlign=\"middle\" /> <span>Logout</span></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav><br/>\r\n                <Outlet/>\r\n                </div>\r\n    )\r\n}\r\nexport default NavBar;","C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\utils\\PrivateRoutes.js",[],[],"C:\\Users\\Nash\\Documents\\Viperia\\client\\src\\pages\\GuessWho.js",["93","94","95"],[],"import React, { useEffect, useState } from 'react'\r\nimport { getUserDetails } from '../utils/api';\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport randomCodeGenerator from '../utils/randomCodeGenerator'\r\nimport { useContext } from 'react';\r\nimport { UserContext } from '../App';\r\n\r\nfunction GuessWho(){\r\n    const user = useContext(UserContext);\r\n    const[roomCode, setRoomCode] = useState('')\r\n\r\n    let navigate = useNavigate();\r\n    const[loading, setLoading] = useState(true);\r\n\r\n    useEffect ( () => {\r\n      getUserDetails()\r\n      .then(({}) => {\r\n          setLoading(false);\r\n      }).catch((err) => \r\n      navigate('/home'));\r\n    },[])\r\n\r\n    return !loading && (\r\n      <div className='page-guess'>\r\n        <div className='base-guess'>\r\n            <div className='titre-guess'>\r\n                <span className='span-guess'>Qui est-ce ?</span>\r\n            </div>\r\n            <div className='photo-guess'>\r\n            <img\r\n             src={\"https://cdn.discordapp.com/avatars/\"+user.discordId+\"/\"+user.avatar+\".png\"}\r\n             className=\"rounded-circle\" height=\"100\"/><br/>\r\n             <span className='pseudo-guess'>{user.username}</span>\r\n            </div>\r\n            <div className='code-guess'>\r\n                <input type='text' placeholder='Game Code' onChange={(event) => setRoomCode(event.target.value)} />\r\n            </div>\r\n            <div className='join-guess'>\r\n                <Link className='d-grid gap-2' to={`/guesswho/lobby?roomCode=${roomCode}`}>\r\n                    <button type=\"button\" className=\"btn btn-primary\">JOIN GAME</button>\r\n                </Link>\r\n            </div>\r\n            <div className='create-guess'>\r\n                <Link className='d-grid gap-2' to={`/guesswho/lobby?roomCode=${randomCodeGenerator(5)}`}>\r\n                    <button type=\"button\" className=\"btn btn-success\">CREATE GAME</button>\r\n                </Link>\r\n            </div>\r\n                \r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default GuessWho;",{"ruleId":"96","severity":1,"message":"97","line":15,"column":7,"nodeType":"98","endLine":15,"endColumn":9,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":12,"column":16,"nodeType":"102","messageId":"103","endLine":12,"endColumn":18},{"ruleId":"96","severity":1,"message":"104","line":16,"column":7,"nodeType":"98","endLine":16,"endColumn":9,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":21,"column":9,"nodeType":"108","endLine":21,"endColumn":103},{"ruleId":"106","severity":1,"message":"107","line":24,"column":9,"nodeType":"108","endLine":24,"endColumn":106},{"ruleId":"106","severity":1,"message":"107","line":27,"column":9,"nodeType":"108","endLine":27,"endColumn":107},{"ruleId":"100","severity":1,"message":"101","line":27,"column":12,"nodeType":"102","messageId":"103","endLine":27,"endColumn":14},{"ruleId":"96","severity":1,"message":"104","line":31,"column":5,"nodeType":"98","endLine":31,"endColumn":7,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":36,"column":16,"nodeType":"112","messageId":"113","endLine":36,"endColumn":23},{"ruleId":"110","severity":1,"message":"114","line":37,"column":10,"nodeType":"112","messageId":"113","endLine":37,"endColumn":18},{"ruleId":"115","severity":1,"message":"116","line":57,"column":31,"nodeType":"117","messageId":"103","endLine":57,"endColumn":33},{"ruleId":"96","severity":1,"message":"118","line":77,"column":6,"nodeType":"98","endLine":77,"endColumn":8,"suggestions":"119"},{"ruleId":"115","severity":1,"message":"116","line":103,"column":23,"nodeType":"117","messageId":"103","endLine":103,"endColumn":25},{"ruleId":"96","severity":1,"message":"120","line":129,"column":5,"nodeType":"98","endLine":129,"endColumn":7,"suggestions":"121"},{"ruleId":"115","severity":1,"message":"116","line":165,"column":56,"nodeType":"117","messageId":"103","endLine":165,"endColumn":58},{"ruleId":"106","severity":1,"message":"107","line":185,"column":15,"nodeType":"108","endLine":186,"endColumn":58},{"ruleId":"106","severity":1,"message":"107","line":191,"column":17,"nodeType":"108","endLine":192,"endColumn":59},{"ruleId":"115","severity":1,"message":"116","line":203,"column":46,"nodeType":"117","messageId":"103","endLine":203,"endColumn":48},{"ruleId":"106","severity":1,"message":"107","line":225,"column":15,"nodeType":"108","endLine":225,"endColumn":117},{"ruleId":"106","severity":1,"message":"107","line":226,"column":15,"nodeType":"108","endLine":226,"endColumn":161},{"ruleId":"106","severity":1,"message":"107","line":238,"column":15,"nodeType":"108","endLine":238,"endColumn":119},{"ruleId":"106","severity":1,"message":"107","line":285,"column":15,"nodeType":"108","endLine":285,"endColumn":126},{"ruleId":"106","severity":1,"message":"107","line":286,"column":15,"nodeType":"108","endLine":286,"endColumn":114},{"ruleId":"122","severity":1,"message":"123","line":18,"column":21,"nodeType":"108","endLine":18,"endColumn":220},{"ruleId":"106","severity":1,"message":"107","line":19,"column":21,"nodeType":"108","endLine":21,"endColumn":73},{"ruleId":"100","severity":1,"message":"101","line":17,"column":14,"nodeType":"102","messageId":"103","endLine":17,"endColumn":16},{"ruleId":"96","severity":1,"message":"104","line":21,"column":7,"nodeType":"98","endLine":21,"endColumn":9,"suggestions":"124"},{"ruleId":"106","severity":1,"message":"107","line":30,"column":13,"nodeType":"108","endLine":32,"endColumn":55},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["125"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["127"],"no-unused-vars","'setRoom' is assigned a value but never used.","Identifier","unusedVar","'roomFull' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has missing dependencies: 'URL', 'room', 'user.avatar', 'user.discordId', and 'user.username'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has missing dependencies: 'initCharactersLeft' and 'user.username'. Either include them or remove the dependency array.",["129"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["130"],{"desc":"131","fix":"132"},{"desc":"131","fix":"133"},{"desc":"131","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"131","fix":"139"},"Update the dependencies array to be: [navigate]",{"range":"140","text":"141"},{"range":"142","text":"141"},{"range":"143","text":"141"},"Update the dependencies array to be: [URL, room, user.avatar, user.discordId, user.username]",{"range":"144","text":"145"},"Update the dependencies array to be: [initCharactersLeft, user.username]",{"range":"146","text":"147"},{"range":"148","text":"141"},[491,493],"[navigate]",[437,439],[950,952],[2246,2248],"[URL, room, user.avatar, user.discordId, user.username]",[3835,3837],"[initCharactersLeft, user.username]",[661,663]]